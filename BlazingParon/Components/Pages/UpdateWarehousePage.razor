@page "/updatewarehouse"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@using BlazingParon.Models

<h3>Update Warehouse</h3>


<div class="form-group">
    <label for="ID">ID</label>
    <input type="text" class="form-control" id="ID" placeholder="Enter Warehouse ID"
        @bind="updatedWarehouse.WarehouseId">
</div>
<div class="form-group">
    <label for="name">Name</label>
    <input type="text" class="form-control" id="name" placeholder="Enter name" @bind="updatedWarehouse.Name">
</div>
<p></p>
<button type="submit" class="btn btn-primary" @onclick="UpdateWarehouse">Update</button>

@if (warehouses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>Warehouse ID</th>
            <th>Warehouse Name</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var warehouse in warehouses)
            {
                <tr>
                    <td>@warehouse.WarehouseId</td>
                    <td>@warehouse.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    List<Warehouse> warehouses = new();
    Warehouse updatedWarehouse = new Warehouse();
    int warehouseIdToDelete = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadWarehouses();
    }

    private async Task LoadWarehouses()
    {
        warehouses = await HttpClient.GetFromJsonAsync<List<Warehouse>>(NavigationManager.BaseUri + "warehousesAPI");
        StateHasChanged();
    }

    private async Task UpdateWarehouse()
    {
        var response = await HttpClient.PutAsJsonAsync(NavigationManager.BaseUri + "warehousesAPI/", updatedWarehouse);
        if (response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Warehouse updated successfully");
            LoadWarehouses();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Warehouse update failed");
        }
    }

}
