@page "/products"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@using BlazingParon.Models;

<PageTitle>Products</PageTitle>

<h1>Products in database</h1>
<input type="number" @bind="productIdToDelete" />
<button class="btn btn-danger" @onclick="() => DeleteProduct()">Delete Product</button>
<p></p>
<a href="/addproduct" class="btn btn-primary">Add Product</a>
<a href="/updateproduct" class="btn btn-primary">Update Product</a>



@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>Product ID</th>
            <th>Product Name</th>
            <th>Price</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in products)
{
    <tr>
        <td>@product.ProductId</td>
        <td>@product.Name</td>
        <td>@product.Price</td>
        <td>@product.Description</td>
    </tr>
}

        </tbody>
    </table>
}

@code {
    List<Product> products = new();
    int productIdToDelete = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        products = await HttpClient.GetFromJsonAsync<List<Product>>(NavigationManager.BaseUri + "productsAPI");
        StateHasChanged();
    }

    private async Task DeleteProduct()
    {
        Console.WriteLine("Deleting product with id: " + productIdToDelete);
        var response = await HttpClient.DeleteAsync(NavigationManager.BaseUri + "productsAPI/" + productIdToDelete);

        if (response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Product deleted successfully");
            await LoadProducts(); // Re-fetch the products to update the UI
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error deleting product");
        }
    }
}

