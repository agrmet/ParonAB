@page "/deliveries"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@using BlazingParon.Models

<h3>Deliveries</h3>

@if (deliveries == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>Product</th>
            <th>Sending Warehouse</th>
            <th>Receiving Warehouse</th>
            <th>Quantity</th>
            <th>Delivery Date</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var delivery in deliveries)
            {
                <tr>
                    <td>@products[delivery.ProductId].Name</td>
                    <td>@warehouses[delivery.SendingWarehouseId].Name</td>
                    <td>@warehouses[delivery.ReceivingWarehouseId].Name</td>
                    <td>@delivery.Quantity</td>
                    <td>@delivery.Date</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Deliveries> deliveries = new List<Deliveries>();
    Dictionary<int, Product> products = new();
    Dictionary<int, Warehouse> warehouses = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task LoadData()
    {
        var response = await HttpClient.GetFromJsonAsync<List<Deliveries>>(NavigationManager.BaseUri + "deliveriesAPI");
        deliveries = response;

        var allProducts = await HttpClient.GetFromJsonAsync<List<Product>>(NavigationManager.BaseUri + "productsAPI");
        var allWarehouses = await HttpClient.GetFromJsonAsync<List<Warehouse>>(NavigationManager.BaseUri + "warehousesAPI");

        products = allProducts?.ToDictionary(p => p.ProductId) ?? new Dictionary<int, Product>();
        warehouses = allWarehouses?.ToDictionary(w => w.WarehouseId) ?? new Dictionary<int, Warehouse>();
        StateHasChanged();

    }



}
